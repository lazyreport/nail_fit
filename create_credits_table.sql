-- Create User Credits table
CREATE TABLE "User Credits" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) NOT NULL,
    credits INTEGER NOT NULL DEFAULT 0,
    is_admin BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE "User Credits" ENABLE ROW LEVEL SECURITY;

-- Users can view their own credits
CREATE POLICY "Users can view their own credits"
ON "User Credits"
FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- Admin users can view all credits
CREATE POLICY "Admin users can view all credits"
ON "User Credits"
FOR SELECT
TO authenticated
USING (EXISTS (
    SELECT 1 FROM "User Credits"
    WHERE user_id = auth.uid() AND is_admin = true
));

-- Admin users can update credits
CREATE POLICY "Admin users can update credits"
ON "User Credits"
FOR UPDATE
TO authenticated
USING (EXISTS (
    SELECT 1 FROM "User Credits"
    WHERE user_id = auth.uid() AND is_admin = true
));

-- Users can insert their own credits record
CREATE POLICY "Users can insert their own credits"
ON "User Credits"
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Create trigger for updating updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_credits_updated_at
    BEFORE UPDATE ON "User Credits"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Insert admin user credits (for service@nailfit.com)
INSERT INTO "User Credits" (user_id, credits, is_admin)
SELECT id, 999999, true
FROM auth.users
WHERE email = 'service@nailfit.com'
ON CONFLICT (user_id) DO UPDATE
SET credits = 999999, is_admin = true; 